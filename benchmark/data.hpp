//
// Copyright (c) 2024 Kris Jusiak (kris at jusiak dot net)
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
#pragma once

#include <array>
#include <mph>

namespace data::inline v_1_0_0 {
// clang-format off
inline constexpr std::array random_strings_5_len_4{
  std::pair{std::array{'F', 'X', 'B', ' ',}, 1},
  std::pair{std::array{'C', 'O', 'D', 'I',}, 2},
  std::pair{std::array{'D', 'D', 'M', 'X',}, 3},
  std::pair{std::array{'M', 'O', 'H', 'O',}, 4},
  std::pair{std::array{'S', 'P', 'C', 'B',}, 5},
};

inline constexpr std::array random_strings_5_len_8{
  std::pair{std::array{'F', 'X', 'B', ' ', ' ', ' ', ' ', ' ',}, 1},
  std::pair{std::array{'C', 'O', 'D', 'I', ' ', ' ', ' ', ' ',}, 2},
  std::pair{std::array{'D', 'D', 'M', 'X', ' ', ' ', ' ', ' ',}, 3},
  std::pair{std::array{'M', 'O', 'H', 'O', ' ', ' ', ' ', ' ',}, 4},
  std::pair{std::array{'S', 'P', 'C', 'B', ' ', ' ', ' ', ' ',}, 5},
};

inline constexpr std::array random_strings_6_len_2_5{
  std::pair{mph::fixed_string{"ftp"}, 1},
  std::pair{mph::fixed_string{"file"}, 2},
  std::pair{mph::fixed_string{"http"}, 3},
  std::pair{mph::fixed_string{"https"}, 4},
  std::pair{mph::fixed_string{"ws"}, 5},
  std::pair{mph::fixed_string{"wss"}, 6},
};

inline constexpr std::array random_strings_100_len_8{
  std::pair{std::array{'I','I','I',' ',' ',' ',' ',' ',}, 1},
  std::pair{std::array{'A','G','M','-','C',' ',' ',' ',}, 2},
  std::pair{std::array{'L','O','P','E',' ',' ',' ',' ',}, 3},
  std::pair{std::array{'F','E','M','S',' ',' ',' ',' ',}, 4},
  std::pair{std::array{'I','E','A',' ',' ',' ',' ',' ',}, 5},
  std::pair{std::array{'V','Y','M','I',' ',' ',' ',' ',}, 6},
  std::pair{std::array{'B','H','K',' ',' ',' ',' ',' ',}, 7},
  std::pair{std::array{'S','I','E','B',' ',' ',' ',' ',}, 8},
  std::pair{std::array{'D','G','B','P',' ',' ',' ',' ',}, 9},
  std::pair{std::array{'I','N','F','N',' ',' ',' ',' ',}, 10},
  std::pair{std::array{'U','S','R','T',' ',' ',' ',' ',}, 11},
  std::pair{std::array{'B','C','O','R',' ',' ',' ',' ',}, 12},
  std::pair{std::array{'T','W','M',' ',' ',' ',' ',' ',}, 13},
  std::pair{std::array{'B','V','S','N',' ',' ',' ',' ',}, 14},
  std::pair{std::array{'S','T','B','A',' ',' ',' ',' ',}, 15},
  std::pair{std::array{'G','P','K',' ',' ',' ',' ',' ',}, 16},
  std::pair{std::array{'L','V','H','D',' ',' ',' ',' ',}, 17},
  std::pair{std::array{'F','T','E','K',' ',' ',' ',' ',}, 18},
  std::pair{std::array{'G','L','B','S',' ',' ',' ',' ',}, 19},
  std::pair{std::array{'C','U','B','B',' ',' ',' ',' ',}, 20},
  std::pair{std::array{'L','R','C','X',' ',' ',' ',' ',}, 21},
  std::pair{std::array{'H','T','G','M',' ',' ',' ',' ',}, 22},
  std::pair{std::array{'R','Y','N',' ',' ',' ',' ',' ',}, 23},
  std::pair{std::array{'I','P','G',' ',' ',' ',' ',' ',}, 24},
  std::pair{std::array{'P','N','N','T','G',' ',' ',' ',}, 25},
  std::pair{std::array{'Z','I','G',' ',' ',' ',' ',' ',}, 26},
  std::pair{std::array{'I','V','R','-','A',' ',' ',' ',}, 27},
  std::pair{std::array{'I','N','V','A',' ',' ',' ',' ',}, 28},
  std::pair{std::array{'M','N','E',' ',' ',' ',' ',' ',}, 29},
  std::pair{std::array{'K','R','A',' ',' ',' ',' ',' ',}, 30},
  std::pair{std::array{'B','R','M','K',' ',' ',' ',' ',}, 31},
  std::pair{std::array{'A','R','K','G',' ',' ',' ',' ',}, 32},
  std::pair{std::array{'F','F','R',' ',' ',' ',' ',' ',}, 33},
  std::pair{std::array{'Q','T','R','X',' ',' ',' ',' ',}, 34},
  std::pair{std::array{'X','T','N',' ',' ',' ',' ',' ',}, 35},
  std::pair{std::array{'B','A','C','-','A',' ',' ',' ',}, 36},
  std::pair{std::array{'C','Y','B','E',' ',' ',' ',' ',}, 37},
  std::pair{std::array{'E','T','J',' ',' ',' ',' ',' ',}, 38},
  std::pair{std::array{'J','H','C','S',' ',' ',' ',' ',}, 39},
  std::pair{std::array{'R','B','C','A','A',' ',' ',' ',}, 40},
  std::pair{std::array{'G','D','S',' ',' ',' ',' ',' ',}, 41},
  std::pair{std::array{'W','T','I','D',' ',' ',' ',' ',}, 42},
  std::pair{std::array{'T','C','O',' ',' ',' ',' ',' ',}, 43},
  std::pair{std::array{'B','W','A',' ',' ',' ',' ',' ',}, 44},
  std::pair{std::array{'M','I','E',' ',' ',' ',' ',' ',}, 45},
  std::pair{std::array{'G','E','N','Y',' ',' ',' ',' ',}, 46},
  std::pair{std::array{'T','D','O','C',' ',' ',' ',' ',}, 47},
  std::pair{std::array{'M','C','R','O',' ',' ',' ',' ',}, 48},
  std::pair{std::array{'Q','F','I','N',' ',' ',' ',' ',}, 49},
  std::pair{std::array{'N','B','T','B',' ',' ',' ',' ',}, 50},
  std::pair{std::array{'P','W','C',' ',' ',' ',' ',' ',}, 51},
  std::pair{std::array{'F','Q','A','L',' ',' ',' ',' ',}, 52},
  std::pair{std::array{'N','J','A','N',' ',' ',' ',' ',}, 53},
  std::pair{std::array{'I','W','B',' ',' ',' ',' ',' ',}, 54},
  std::pair{std::array{'G','X','G','X','W',' ',' ',' ',}, 55},
  std::pair{std::array{'E','D','U','C',' ',' ',' ',' ',}, 56},
  std::pair{std::array{'R','E','T','L',' ',' ',' ',' ',}, 57},
  std::pair{std::array{'V','I','A','C','A',' ',' ',' ',}, 58},
  std::pair{std::array{'K','L','D','O',' ',' ',' ',' ',}, 59},
  std::pair{std::array{'N','E','E','-','I',' ',' ',' ',}, 60},
  std::pair{std::array{'F','B','C',' ',' ',' ',' ',' ',}, 61},
  std::pair{std::array{'J','W','.','A',' ',' ',' ',' ',}, 62},
  std::pair{std::array{'B','S','M','X',' ',' ',' ',' ',}, 63},
  std::pair{std::array{'F','M','N','B',' ',' ',' ',' ',}, 64},
  std::pair{std::array{'E','X','R',' ',' ',' ',' ',' ',}, 65},
  std::pair{std::array{'T','A','C',' ',' ',' ',' ',' ',}, 66},
  std::pair{std::array{'F','D','L',' ',' ',' ',' ',' ',}, 67},
  std::pair{std::array{'S','W','I','R',' ',' ',' ',' ',}, 68},
  std::pair{std::array{'C','L','W','T',' ',' ',' ',' ',}, 69},
  std::pair{std::array{'L','M','H','B',' ',' ',' ',' ',}, 70},
  std::pair{std::array{'I','R','T','C',' ',' ',' ',' ',}, 71},
  std::pair{std::array{'C','D','M','O',' ',' ',' ',' ',}, 72},
  std::pair{std::array{'H','M','L','P','-','A',' ',' ',}, 73},
  std::pair{std::array{'L','V','U','S',' ',' ',' ',' ',}, 74},
  std::pair{std::array{'U','M','R','X',' ',' ',' ',' ',}, 75},
  std::pair{std::array{'G','J','H',' ',' ',' ',' ',' ',}, 76},
  std::pair{std::array{'F','R','M','E',' ',' ',' ',' ',}, 77},
  std::pair{std::array{'C','E','I','X',' ',' ',' ',' ',}, 78},
  std::pair{std::array{'I','H','D',' ',' ',' ',' ',' ',}, 79},
  std::pair{std::array{'G','H','S','I',' ',' ',' ',' ',}, 80},
  std::pair{std::array{'D','C','P','-','B',' ',' ',' ',}, 81},
  std::pair{std::array{'S','B',' ',' ',' ',' ',' ',' ',}, 82},
  std::pair{std::array{'D','S','E',' ',' ',' ',' ',' ',}, 83},
  std::pair{std::array{'C','P','R','T',' ',' ',' ',' ',}, 84},
  std::pair{std::array{'N','R','Z',' ',' ',' ',' ',' ',}, 85},
  std::pair{std::array{'V','L','Y','P','O',' ',' ',' ',}, 86},
  std::pair{std::array{'T','D','A','C',' ',' ',' ',' ',}, 87},
  std::pair{std::array{'Z','X','Z','Z','T',' ',' ',' ',}, 88},
  std::pair{std::array{'I','W','X',' ',' ',' ',' ',' ',}, 89},
  std::pair{std::array{'N','C','S','M',' ',' ',' ',' ',}, 90},
  std::pair{std::array{'W','I','R','E',' ',' ',' ',' ',}, 91},
  std::pair{std::array{'S','F','S','T',' ',' ',' ',' ',}, 92},
  std::pair{std::array{'E','W','D',' ',' ',' ',' ',' ',}, 93},
  std::pair{std::array{'D','E','A','C','W',' ',' ',' ',}, 94},
  std::pair{std::array{'T','R','P','X',' ',' ',' ',' ',}, 95},
  std::pair{std::array{'U','C','T','T',' ',' ',' ',' ',}, 96},
  std::pair{std::array{'Z','A','Z','Z','T',' ',' ',' ',}, 97},
  std::pair{std::array{'C','Y','D',' ',' ',' ',' ',' ',}, 98},
  std::pair{std::array{'N','U','R','E',' ',' ',' ',' ',}, 99},
  std::pair{std::array{'W','E','A','T',' ',' ',' ',' ',}, 100},
};

inline constexpr std::array random_strings_100_len_1_8{
  std::pair{mph::fixed_string{"apple"}, 1},
  std::pair{mph::fixed_string{"Autumn"}, 2},
  std::pair{mph::fixed_string{"Basket"}, 3},
  std::pair{mph::fixed_string{"Beach"}, 4},
  std::pair{mph::fixed_string{"Beacon"}, 5},
  std::pair{mph::fixed_string{"Beauty"}, 6},
  std::pair{mph::fixed_string{"Book"}, 7},
  std::pair{mph::fixed_string{"Breeze"}, 8},
  std::pair{mph::fixed_string{"Bridge"}, 9},
  std::pair{mph::fixed_string{"Bubble"}, 10},
  std::pair{mph::fixed_string{"Candle"}, 11},
  std::pair{mph::fixed_string{"phone"}, 12},
  std::pair{mph::fixed_string{"1"}, 13},
  std::pair{mph::fixed_string{"1234"}, 14},
  std::pair{mph::fixed_string{"12345678"}, 15},
  std::pair{mph::fixed_string{"98765432"}, 16},
  std::pair{mph::fixed_string{"11111111"}, 17},
  std::pair{mph::fixed_string{"zzzzzzz"}, 18},
  std::pair{mph::fixed_string{"cascade"}, 19},
  std::pair{mph::fixed_string{"Cat"}, 20},
  std::pair{mph::fixed_string{"Child"}, 21},
  std::pair{mph::fixed_string{"Cloud"}, 22},
  std::pair{mph::fixed_string{"Coffee"}, 23},
  std::pair{mph::fixed_string{"Color"}, 24},
  std::pair{mph::fixed_string{"Comet"}, 25},
  std::pair{mph::fixed_string{"Cuddle"}, 26},
  std::pair{mph::fixed_string{"Dance"}, 27},
  std::pair{mph::fixed_string{"Dog"}, 28},
  std::pair{mph::fixed_string{"Dream"}, 29},
  std::pair{mph::fixed_string{"Earth"}, 30},
  std::pair{mph::fixed_string{"Echo"}, 31},
  std::pair{mph::fixed_string{"Elusive"}, 32},
  std::pair{mph::fixed_string{"Enchant"}, 33},
  std::pair{mph::fixed_string{"Ethereal"}, 34},
  std::pair{mph::fixed_string{"Feather"}, 35},
  std::pair{mph::fixed_string{"Flight"}, 36},
  std::pair{mph::fixed_string{"Flower"}, 37},
  std::pair{mph::fixed_string{"Forest"}, 38},
  std::pair{mph::fixed_string{"Fruit"}, 39},
  std::pair{mph::fixed_string{"Galaxy"}, 40},
  std::pair{mph::fixed_string{"Glisten"}, 41},
  std::pair{mph::fixed_string{"Glitter"}, 42},
  std::pair{mph::fixed_string{"Guitar"}, 43},
  std::pair{mph::fixed_string{"Happy"}, 44},
  std::pair{mph::fixed_string{"Harmony"}, 45},
  std::pair{mph::fixed_string{"Journey"}, 46},
  std::pair{mph::fixed_string{"Laugh"}, 47},
  std::pair{mph::fixed_string{"Light"}, 48},
  std::pair{mph::fixed_string{"lullaby"}, 49},
  std::pair{mph::fixed_string{"Luminous"}, 50},
  std::pair{mph::fixed_string{"Mirror"}, 51},
  std::pair{mph::fixed_string{"Misty"}, 52},
  std::pair{mph::fixed_string{"Moon"}, 53},
  std::pair{mph::fixed_string{"Mountain"}, 54},
  std::pair{mph::fixed_string{"Music"}, 55},
  std::pair{mph::fixed_string{"Ocean"}, 56},
  std::pair{mph::fixed_string{"Peace"}, 57},
  std::pair{mph::fixed_string{"Petal"}, 58},
  std::pair{mph::fixed_string{"Pillow"}, 59},
  std::pair{mph::fixed_string{"Puddle"}, 60},
  std::pair{mph::fixed_string{"Puzzle"}, 61},
  std::pair{mph::fixed_string{"Quasar"}, 62},
  std::pair{mph::fixed_string{"Quiet"}, 63},
  std::pair{mph::fixed_string{"Radiant"}, 64},
  std::pair{mph::fixed_string{"Rain"}, 65},
  std::pair{mph::fixed_string{"River"}, 66},
  std::pair{mph::fixed_string{"Rocket"}, 67},
  std::pair{mph::fixed_string{"Secret"}, 68},
  std::pair{mph::fixed_string{"Serene"}, 69},
  std::pair{mph::fixed_string{"Shadow"}, 70},
  std::pair{mph::fixed_string{"Silken"}, 71},
  std::pair{mph::fixed_string{"Sincere"}, 72},
  std::pair{mph::fixed_string{"sleep"}, 73},
  std::pair{mph::fixed_string{"Smile"}, 74},
  std::pair{mph::fixed_string{"Solar"}, 75},
  std::pair{mph::fixed_string{"Spark"}, 76},
  std::pair{mph::fixed_string{"Sparkle"}, 77},
  std::pair{mph::fixed_string{"Sphere"}, 78},
  std::pair{mph::fixed_string{"Spiral"}, 79},
  std::pair{mph::fixed_string{"Spring"}, 80},
  std::pair{mph::fixed_string{"Stars"}, 81},
  std::pair{mph::fixed_string{"Summer"}, 82},
  std::pair{mph::fixed_string{"Sun"}, 83},
  std::pair{mph::fixed_string{"Sweet"}, 84},
  std::pair{mph::fixed_string{"Swift"}, 85},
  std::pair{mph::fixed_string{"Swirl"}, 86},
  std::pair{mph::fixed_string{"Symphony"}, 87},
  std::pair{mph::fixed_string{"Tranquil"}, 88},
  std::pair{mph::fixed_string{"Travel"}, 89},
  std::pair{mph::fixed_string{"Twilight"}, 90},
  std::pair{mph::fixed_string{"Velvet"}, 91},
  std::pair{mph::fixed_string{"Warmth"}, 92},
  std::pair{mph::fixed_string{"Whisper"}, 93},
  std::pair{mph::fixed_string{"Whistle"}, 94},
  std::pair{mph::fixed_string{"Window"}, 95},
  std::pair{mph::fixed_string{"Windy"}, 96},
  std::pair{mph::fixed_string{"Winter"}, 97},
  std::pair{mph::fixed_string{"Wisdom"}, 98},
  std::pair{mph::fixed_string{"Zephyr"}, 99},
  std::pair{mph::fixed_string{"keyboard"}, 100},
};

inline constexpr std::array random_uints_5{
  std::pair{ 54u,  91u},
  std::pair{324u,  54u},
  std::pair{ 64u, 324u},
  std::pair{234u,  64u},
  std::pair{ 91u, 234u},
};

// clang-format on
}  // namespace data::inline v_1_0_0
