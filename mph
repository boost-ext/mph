//
// Copyright (c) 2024 Kris Jusiak (kris at jusiak dot net)
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
#include <iostream>
#if __cplusplus < 202002L
#error "MPH requires C++20!"
#else

#if defined(__cpp_modules)
export module mph;
#endif

#ifndef MPH
#define MPH 1'0'0 // SemVer - should match mph namespace

#include <algorithm>
#include <climits>
#include <array>
#include <bit>
#include <cassert>
#include <cstdint>
#include <new>
#include <numeric>
#include <ranges>
#include <string_view>
#include <span>
#include <type_traits>
#include <vector>

#if __has_include(<x86intrin.h>)
#include <x86intrin.h>
#endif

#if defined(__cpp_modules)
export
#endif

/**
 * Minimal perfect hash function library (https://en.wikipedia.org/wiki/Perfect_hash_function#Minimal_perfect_hash_function)
 */
namespace mph::inline v_1_0_0 {
namespace utility {
#if defined(__cpp_lib_hardware_interference_size)
static constexpr auto cache_line_size = ::std::hardware_constructive_interference_size;
#else
static constexpr auto cache_line_size = 64;  // x86-64
#endif

[[nodiscard]] constexpr auto id(auto&& symbol) -> decltype(auto) {
  if constexpr (requires { symbol.first; }) {
    return symbol.first;
  } else if constexpr (requires { symbol.id; }) {
    return symbol.id;
  } else {
    return (symbol);
  }
}

// clang-format off
static_assert(42 == id(42));
static_assert(std::string_view{"a"} == id(std::pair{std::string_view{"a"}, 42}));
// clang-format on

[[nodiscard]] constexpr auto value(auto&& symbol) -> decltype(auto) {
  if constexpr (requires { symbol.second; }) {
    return symbol.second;
  } else if constexpr (requires { symbol.value; }) {
    return symbol.value;
  } else {
    return (symbol);
  }
}

// clang-format off
static_assert(42 == value(42));
static_assert(42 == value(std::pair{std::string_view{"a"}, 42}));
// clang-format on

template <std::size_t N>
  requires(N > 0u)
struct bitset final {
  constexpr explicit(true) bitset(const auto value) {
    for (std::size_t i{}; i < N; ++i) {
      bits[i] = value & (1ull << i);
    }
  }
  constexpr auto set(const auto i, const auto value) { bits[i] = value; }
  [[nodiscard]] constexpr auto size() const { return std::size(bits); }
  [[nodiscard]] constexpr auto operator[](const auto i) const { return bits[i]; }
  template <class T, const auto endian = std::endian::native>
  [[nodiscard]] constexpr auto to() const -> T
    requires(sizeof(T) * CHAR_BIT >= N)
  {
    T result{};
    for (auto i = 0u; i < N; ++i) {
      result |= static_cast<T>(bits[i]) << i;
    }
    return result;
  }
 private:
  std::array<bool, N> bits{};
};

// clang-format off
static_assert(1 == bitset<1>{1}[0]);
static_assert(0 == bitset<1>{0}[0]);
static_assert(1 == bitset<2>{0b01}[0]);
static_assert(0 == bitset<2>{0b01}[1]);
static_assert(0b01 == bitset<2>{0b01}.to<int>());
static_assert(0b10 == bitset<2>{0b10}.to<int>());
// clang-format on

template <class T, const auto endian = std::endian::native>
[[nodiscard]] constexpr auto as(const auto value) -> T {
  T result{};
  if constexpr (endian == std::endian::little) {
    for (auto i = 0u; i < std::min(std::size(value), sizeof(T)); ++i) {
      result = (result << CHAR_BIT) | value[std::min(std::size(value), sizeof(T)) - 1 - i];
    }
  } else {
  }
  return result;
}

// clang-format off
static_assert(std::is_same_v<std::uint16_t, decltype(as<std::uint16_t>(std::array<std::uint8_t, 2>{0, 1}))>);
static_assert(std::uint32_t(0b00000001'00000000) == as<std::uint16_t>(std::array<std::uint8_t, 2>{0, 1}));
static_assert(std::is_same_v<std::uint16_t, decltype(as<std::uint16_t>( std::array<std::uint8_t, 2>{1, 0}))>);
static_assert(std::uint32_t(0b00000000'00000001) == as<std::uint16_t>(std::array<std::uint8_t, 2>{1, 0}));
static_assert(std::is_same_v<std::uint8_t, decltype(as<std::uint8_t>(std::string_view{"a"}))>);
static_assert(std::uint8_t('a') == as<std::uint8_t>(std::string_view{"a"}));
static_assert(std::is_same_v<std::uint32_t, decltype(as<std::uint32_t>(std::array<std::uint8_t, 4>{ 'a', 'b', 0, 0}))>);
static_assert(((std::uint32_t('b') << CHAR_BIT) | std::uint32_t('a') << 0) == as<std::uint32_t>(std::array<std::uint8_t, 4>{'a', 'b', 0, 0}));
static_assert(std::is_same_v<std::uint32_t, decltype(as<std::uint32_t>(std::array<std::uint8_t, 4>{0, 0, 'a', 'b'}))>);
static_assert(((std::uint32_t('b') << CHAR_BIT*3) | std::uint32_t('a') << CHAR_BIT*2) == as<std::uint32_t>(std::array<std::uint8_t, 4>{0, 0, 'a', 'b'}));
// clang-format on

template<class... Ts> struct overloaded final : Ts... { using Ts::operator()...; };
template<class... Ts> overloaded(Ts...) -> overloaded<Ts...>;

// clang-format off
static_assert(42 == overloaded{[](auto v) { return v; }}(42));
static_assert(1 == overloaded{[](int) { return 1; }, [](bool) { return 2; }}(int{}));
static_assert(2 == overloaded{[](int) { return 1; }, [](bool) { return 2; }}(bool{}));
// clang-format on

/**
 * https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#text=pext
 *
 * DO WHILE m < 64
 * 	IF mask[m] == 1
 * 		dst[k] := tmp[m]
 * 		k := k + 1
 * 	FI
 * 	m := m + 1
 * OD
 */
template <class T, const auto endian = std::endian::native>
[[nodiscard]] constexpr auto pext(const T a, T mask) {
  T result{};
  auto k = 0u;
  auto m = 0u;
  while (m < sizeof(T) * CHAR_BIT) {
    if ((mask & 1) == 1) {
      result |= ((a >> m) & 1) << k++;
    }
    mask >>= 1;
    ++m;
  }
  return result;
}

[[nodiscard]] [[gnu::target("bmi2")]] auto pext(const std::uint32_t a, const std::uint32_t mask) {
  return _pext_u32(a, mask);
}

[[nodiscard]] [[gnu::target("bmi2")]] auto pext(const std::uint64_t a, const std::uint64_t mask) {
  return _pext_u64(a, mask);
}

// clang-format off
static_assert(0b00 == pext(0b00, 0b00));
static_assert(0b00 == pext(0b01, 0b00));
static_assert(0b01 == pext(0b01, 0b01));
static_assert(0b01 == pext(0b01, 0b11));
static_assert(0b00 == pext(0b01, 0b10));
static_assert(0b01 == pext(0b11, 0b10));
static_assert(0b01 == pext(0b11, 0b01));
static_assert(0b11 == pext(0b11, 0b11));
// clang-format on

/**
 * Finds T type mask which uniquely identifies given symbols
 */
template <class T>
[[nodiscard]] constexpr auto find_mask(const std::ranges::range auto &symbols) {
  const auto is_unique = [&](const auto mask) {
    std::vector<T> v{};
    for (const auto &symbol : symbols) {
      const auto value = pext<T>(as<T>(utility::id(symbol)), mask.template to<T>());
      if (std::find(std::cbegin(v), std::cend(v), value) != std::cend(v)) {
        return false;
      }
      v.push_back(value);
    }
    return true;
  };

  bitset<sizeof(T) * CHAR_BIT> mask(std::numeric_limits<T>::max());
  for (auto i = 0u; i < std::size(mask); ++i) {
    mask.set(i, 0);
    if (not is_unique(mask)) {
      mask.set(i, 1);
    }
  }
  if (not is_unique(mask)) {
    throw;  // not a constant
  }
  return mask.template to<T>();
}

// clang-format off
static_assert(0b00000000'00000001 == find_mask<std::uint16_t>(std::array{ std::array<std::uint8_t, 2>{1, 0}, std::array<std::uint8_t, 2>{0, 0}}));
static_assert(0b00000001'00000000 == find_mask<std::uint16_t>(std::array{ std::array<std::uint8_t, 2>{0, 0}, std::array<std::uint8_t, 2>{0, 1}}));
static_assert(0b00000001'00000000 == find_mask<std::uint16_t>(std::array{ std::array<std::uint8_t, 2>{1, 0}, std::array<std::uint8_t, 2>{0, 1}}));
static_assert(0b00000001'00000000 == find_mask<std::uint16_t>(std::array{ std::array<std::uint8_t, 2>{0, 1}, std::array<std::uint8_t, 2>{1, 0}}));
static_assert(0b00000001'00000000 == find_mask<std::uint16_t>(std::array{ std::array<std::uint8_t, 2>{1, 1}, std::array<std::uint8_t, 2>{1, 0}}));
static_assert(0b00000000'00000001 == find_mask<std::uint16_t>(std::array{ std::array<std::uint8_t, 2>{1, 1}, std::array<std::uint8_t, 2>{0, 1}}));
static_assert(0b00000000'00000001'00000001 == find_mask<std::uint16_t>(std::array{ std::array<std::uint8_t, 3>{1, 1, 1}, std::array<std::uint8_t, 3>{0, 0, 0}, std::array<std::uint8_t, 3>{1, 0, 1}}));
static_assert(0b00000000'00000001'00000001 == find_mask<std::uint16_t>(std::array{ std::array<std::uint8_t, 3>{0, 0, 1}, std::array<std::uint8_t, 3>{1, 0, 1}, std::array<std::uint8_t, 3>{1, 1, 0}}));
static_assert(0b00000000'00000001'00000001 == find_mask<std::uint16_t>(std::array{ std::array<std::uint8_t, 3>{0, 0, 0}, std::array<std::uint8_t, 3>{1, 1, 1}, std::array<std::uint8_t, 3>{0, 1, 0}}));
// clang-format on

template<const auto symbols>
inline constexpr auto min_max_length = [](const auto& v) { // std::minmax_element is not constexpr
  auto min = std::size(utility::id(v[0]));
  auto max = std::size(utility::id(v[0]));
  for (const auto& symbol : v) {
    min = std::min(min, std::size(utility::id(symbol)));
    max = std::max(max, std::size(utility::id(symbol)));
  }
  return std::pair{min, max};
}(symbols());

// clang-format off
static_assert(std::pair{0ul, 0ul} == min_max_length<[] { return std::array{std::string_view{""}}; }>);
static_assert(std::pair{1ul, 1ul} == min_max_length<[] { return std::array{std::string_view{"a"}, std::string_view{"b"}}; } >);
static_assert(std::pair{1ul, 2ul} == min_max_length<[] { return std::array{std::string_view{"a"}, std::string_view{"b"}, std::string_view{"ab"}}; }>);
// clang-format on

template<const auto symbols>
inline constexpr auto max_length = [](const auto& v) { return std::size(utility::id(*std::max_element(std::cbegin(v), std::cend(v), [](const auto& lhs, const auto& rhs) { return std::size(utility::id(lhs)) < std::size(utility::id(rhs)); }))); }(symbols());

// clang-format off
static_assert(0u == max_length<[] { return std::array{std::string_view{""}}; }>);
static_assert(1u == max_length<[] { return std::array{std::string_view{"a"}, std::string_view{"b"}}; } >);
static_assert(2u == max_length<[] { return std::array{std::string_view{"a"}, std::string_view{"b"}, std::string_view{"ab"}}; }>);
// clang-format on

template<class T, const auto symbols>
[[nodiscard]] auto copy_required_bytes(const auto data) noexcept(true) {
  if constexpr (requires { std::bool_constant<(std::size(data), true)>{}; }) {
    static_assert(std::size(data) <= sizeof(T));
    if constexpr (sizeof(T) == std::size(data)) {
      return *std::bit_cast<const T*>(std::data(data));
    } else {
      T t{};
      __builtin_memcpy(std::addressof(t), std::data(data), std::size(data));
      return t;
    }
  } else {
    T t{};
    const auto size = std::size(data);
    if constexpr (constexpr auto min_max = utility::min_max_length<symbols>; min_max.second-min_max.first == 0) {
      assert(size == min_max.first == min_max.second);
      __builtin_memcpy(std::addressof(t), std::data(data), min_max.first);
    } else {
      assert(size > min_max.first and size < min_max.second);
      [&]<auto... Ns>(std::index_sequence<Ns...>) {
        ([&] {
         constexpr auto N = Ns + min_max.first;
         if (size == N) { __builtin_memcpy(std::addressof(t), std::data(data), N); }
        }(), ...);
      }(std::make_index_sequence<min_max.second-min_max.first+1>{});
    }
    return t;
  }
}
}  // namespace utility

namespace concepts {
template <const std::uint64_t mask, const std::size_t max_bits_size>
concept bits_size_le = (std::popcount(mask) <= max_bits_size);

// clang-format off
static_assert(bits_size_le<0b00, 0u>);
static_assert(bits_size_le<0b00, 1u>);
static_assert(bits_size_le<0b00, 2u>);
static_assert(bits_size_le<0b10, 2u>);
static_assert(bits_size_le<0b01, 2u>);
static_assert(not bits_size_le<0b01, 0>);
static_assert(not bits_size_le<0b10, 0>);
static_assert(not bits_size_le<0b11, 1>);
// clang-format on

template <const auto masks, const std::size_t max_bits_size>
concept symbols_bits_size_lt = std::all_of(std::cbegin(masks), std::cend(masks), [](const auto mask) {
  return std::size_t(std::popcount(mask)) <= max_bits_size;
});

// clang-format off
static_assert(symbols_bits_size_lt<std::array{0b00u, 0b00u}, 0u>);
static_assert(symbols_bits_size_lt<std::array{0b01u, 0b01u}, 1u>);
static_assert(symbols_bits_size_lt<std::array{0b10u, 0b01u}, 1u>);
static_assert(not symbols_bits_size_lt<std::array{0b01u, 0b01u}, 0u>);
static_assert(not symbols_bits_size_lt<std::array{0b11u, 0b10u}, 1u>);
static_assert(not symbols_bits_size_lt<std::array{0b10u, 0b11u}, 1u>);
static_assert(not symbols_bits_size_lt<std::array{0b11u, 0b11u}, 1u>);
// clang-format on

template <const auto symbols, std::size_t size>
concept all_symbols_size_lt = [](const auto &v) {
  return std::all_of(std::cbegin(v), std::cend(v), [](const auto &symbol) { return std::size(utility::id(symbol)) <= size; });
}(symbols());

// clang-format off
static_assert(not all_symbols_size_lt<[] { return std::array{std::array<char, 2>{}, std::array<char, 2>{}}; }, 0u>);
static_assert(not all_symbols_size_lt<[] { return std::array{std::array<char, 2>{}, std::array<char, 2>{}}; }, 1u>);
static_assert(all_symbols_size_lt<[] { return std::array{std::array<char, 1>{}, std::array<char, 1>{}}; }, 1u>);
static_assert(all_symbols_size_lt<[] { return std::array{std::array<char, 1>{}, std::array<char, 1>{}}; }, 2u>);
static_assert(all_symbols_size_lt<[] { return std::array{std::array<char, 2>{}, std::array<char, 2>{}}; }, 2u>);
static_assert(all_symbols_size_lt<[] { return std::array{std::array<char, 2>{}, std::array<char, 2>{}}; }, 3u>);
// clang-format on
}  // namespace concepts

constexpr auto conditional = [](const bool cond, const auto lhs, const auto rhs) {
  return cond ? lhs : rhs; // generates jmp (x86-64)
};

constexpr auto branchless = [](const bool cond, const auto lhs, [[maybe_unused]] const auto rhs) {
  return cond * lhs; // generates cmov (x86-64)
};

/**
 * Minimal perfect hashing function based on SWAR
 *  reads sizeof(T) bytes and switches on that
 */
template<class T, const std::size_t cache_line_size = utility::cache_line_size>
class swar {
 public:
  template <const auto unknown, const auto symbols>
    requires concepts::all_symbols_size_lt<symbols, sizeof(T)>
  [[nodiscard]] constexpr auto operator()(auto&& data, [[maybe_unused]] auto &&...args) const noexcept(true) {
    return dispatch<unknown, symbols>(utility::copy_required_bytes<T, symbols>(data), std::make_index_sequence<std::size(symbols())>{});
  }

private:
  template<const auto unknown, const auto symbols, const auto N, const auto... Ns>
  [[nodiscard]] static constexpr auto dispatch(const T value, std::index_sequence<N, Ns...>) {
    switch (value) {
      default:
        if constexpr (not sizeof...(Ns)) {
          return unknown;
        } else {
          return dispatch<unknown, symbols>(value, std::index_sequence<Ns...>{});
        }
      case utility::as<T>(utility::id(symbols()[N])):
        return utility::value(symbols()[N]);
    }
  }
};

/**
 * Minimal perfect hashing function based on intel's pext with support up to 2^max_bits_size elements and with max 8 characters
 *  requires platform with bmi2 support (https://en.wikipedia.org/wiki/X86_Bit_manipulation_instruction_set)
 */
template <const std::size_t max_bits_size, const auto result_policy = conditional,
          const std::size_t cache_line_size = utility::cache_line_size>
class pext {
  template <class T, const auto symbols, const auto mask, const std::size_t size>
  [[nodiscard]] static consteval auto make_lookup() {
    alignas(cache_line_size) std::array<T, size> lookup{};
    for (const auto &symbol : symbols()) {
      lookup[utility::pext<T>(utility::as<T>(utility::id(symbol)), mask)] = utility::as<T>(utility::id(symbol));
    }
    return lookup;
  }

  template <class T, const auto unknown, const auto symbols, const auto mask, const std::size_t size>
  [[nodiscard]] static consteval auto make_index() {
    alignas(cache_line_size) std::array<decltype(unknown), size> index{};
    std::fill(std::begin(index), std::end(index), unknown);
    for (const auto &symbol : symbols()) {
      index[utility::pext<T>(utility::as<T>(utility::id(symbol)), mask)] = utility::value(symbol);
    }

    return index;
  }

 public:
  template <const auto unknown, const auto symbols, class T = std::conditional_t<(utility::max_length<symbols> <= sizeof(std::uint32_t)), std::uint32_t, std::uint64_t>, const auto mask = utility::find_mask<T>(symbols())>
    requires concepts::bits_size_le<mask, max_bits_size> and concepts::all_symbols_size_lt<symbols, sizeof(T)>
  [[nodiscard]] [[gnu::target("bmi2")]] auto operator()(auto&& data, [[maybe_unused]] auto &&...args) const noexcept(true) {
    constexpr auto required_size = [] {
      auto result{1u};
      for (auto i = 0u; i < std::popcount(mask); ++i) {
        result *= 2; // std::pow is not constexpr in libc++
      }
      return result;
    }();

    static constexpr const auto lookup = make_lookup<T, symbols, mask, required_size>();
    static constexpr const auto index = make_index<T, unknown, symbols, mask, required_size>();

    const auto lhs = utility::copy_required_bytes<T, symbols>(data);
    const auto ext = utility::pext(lhs, mask);
    return result_policy(lookup[ext] == lhs, index[ext], unknown);
  }
};

/**
 * Minimal perfect hashing function based on intel's pext with support up to 2^max_bits_size per split on N'th character and with max 8 characters
 *  requires platform with bmi2 support (https://en.wikipedia.org/wiki/X86_Bit_manipulation_instruction_set)
 */
template <const std::size_t max_bits_size, const auto N,
          const auto result_policy = conditional,
          const std::size_t cache_line_size = utility::cache_line_size>
class pext_split {
  template<class T, const auto symbols>
  [[nodiscard]] static consteval auto make_masks() {
    constexpr auto size = std::numeric_limits<std::remove_cvref_t<decltype(utility::id(symbols()[0])[0])>>::max();

    std::vector<std::vector<std::remove_cvref_t<decltype(utility::id(symbols()[0]))>>> v(size);
    for (const auto &symbol : symbols()) {
      v[std::size_t(utility::id(symbol)[N])].push_back(utility::id(symbol));
    }

    std::array<T, size> masks{}; // only used at compile-time, no alignment required
    for (auto i = 0u; i < std::size(masks); ++i) {
      masks[i] = utility::find_mask<T>(v[i]);
    }

    return masks;
  }

  template <class T, const auto symbols, const auto masks, const std::size_t size>
  [[nodiscard]] static consteval auto make_lookups() {
    constexpr auto split_size = std::numeric_limits<std::remove_cvref_t<decltype(utility::id(symbols()[0])[0])>>::max();

    std::array<std::vector<std::remove_cvref_t<decltype(utility::id(symbols()[0]))>>, split_size> v{};
    for (const auto &symbol : symbols()) {
      v[std::size_t(utility::id(symbol)[N])].push_back(utility::id(symbol));
    }

    alignas(cache_line_size) std::array<std::array<T, size>, split_size> lookup{};
    for (auto i = 0u; i < split_size; ++i) {
      for (auto j = 0u; j < std::size(v[i]); ++j) {
        lookup[i][utility::pext<T>(utility::as<T>(v[i][j]), masks[i])] = utility::as<T>(v[i][j]);
      }
    }

    return lookup;
  }

  template <class T, const auto unknown, const auto symbols, const auto masks, const std::size_t size>
  [[nodiscard]] static consteval auto make_indexes() {
    constexpr auto split_size = std::numeric_limits<std::remove_cvref_t<decltype(utility::id(symbols()[0])[0])>>::max();

    std::array<std::vector<std::remove_cvref_t<decltype(symbols()[0])>>, split_size> iv{};
    for (const auto &symbol : symbols()) {
      iv[std::size_t(utility::id(symbol)[N])].push_back(symbol);
    }

    alignas(cache_line_size) std::array<std::array<decltype(unknown), size>, split_size> index{};
    for (auto i = 0u; i < split_size; ++i) {
      std::fill(std::begin(index[i]), std::end(index[i]), unknown);
      for (auto j = 0u; j < std::size(utility::id(iv[i])); ++j) {
        index[i][utility::pext<T>(utility::as<T>(utility::id(iv[i][j])), masks[i])] = utility::value(iv[i][j]);
      }
    }

    return index;
  }

 public:
  template <const auto unknown, const auto symbols, class T = std::conditional_t<(utility::max_length<symbols> <= sizeof(std::uint32_t)), std::uint32_t, std::uint64_t>, const auto masks = make_masks<T, symbols>()>
    requires concepts::symbols_bits_size_lt<masks, max_bits_size> and concepts::all_symbols_size_lt<symbols, sizeof(T)>
  [[nodiscard]] [[gnu::target("bmi2")]] auto operator()(const auto data, [[maybe_unused]] auto &&...args) const noexcept(true) {
    constexpr auto required_size = [] {
      std::vector<std::size_t> sizes{};
      std::transform(std::cbegin(masks), std::cend(masks), std::back_inserter(sizes), [](const auto mask) { return std::popcount(mask); });
      const auto max_size = std::max_element(std::cbegin(sizes), std::cend(sizes));
      auto result{1u};
      for (auto i = 0u; i < *max_size; ++i) {
        result *= 2; // std::pow is not constexpr in libc++
      }
      return result;
    }();

    static constexpr auto lookup = make_lookups<T, symbols, masks, required_size>();
    static constexpr auto index = make_indexes<T, unknown, symbols, masks, required_size>();

    assert(std::size(data) > N);

    const auto id = data[N];
    const auto lhs = utility::copy_required_bytes<T, symbols>(data);
    const auto ext = utility::pext(lhs, masks[id]);
    return result_policy(lookup[id][ext] == lhs, index[id][ext], unknown);
  }
};

/**
 * Default policies
 *
 * @tparam unknown returned if there is no match
 * @tparam symbols constexpr pair of id values such as std::array{{std::pair{"FOO"}, 1}, std::pair{"BAR"}, 2}}
 * @param args... args propagated to policies
 * @return second from matched symbol or unknown if not matched
 */
constexpr auto policies = []<const auto unknown, const auto symbols>(auto&&... args) {
  constexpr auto max_bits_size = 7;
  constexpr auto pext = mph::pext<max_bits_size>{};

  constexpr auto char_index = 0u;
  constexpr auto pext_split = mph::pext_split<max_bits_size, char_index>{};

  constexpr auto swar_32 = mph::swar<std::uint32_t>{};
  constexpr auto swar_64 = mph::swar<std::uint64_t>{};

  if constexpr (requires { pext.template operator()<unknown, symbols>(std::forward<decltype(args)>(args)...); }) {
    return pext.template operator()<unknown, symbols>(std::forward<decltype(args)>(args)...);
  } else if constexpr (requires { pext_split.template operator()<unknown, symbols>(std::forward<decltype(args)>(args)...); }) {
    return pext_split.template operator()<unknown, symbols>(std::forward<decltype(args)>(args)...);
  } else if constexpr (requires { swar_32.template operator()<unknown, symbols>(std::forward<decltype(args)>(args)...); }) {
    return swar_32.template operator()<unknown, symbols>(std::forward<decltype(args)>(args)...);
  } else if constexpr (requires { swar_64.template operator()<unknown, symbols>(std::forward<decltype(args)>(args)...); }) {
    return swar_64.template operator()<unknown, symbols>(std::forward<decltype(args)>(args)...);
  } else {
    constexpr auto hash_cant_be_created = [](auto &&) { return false; }(symbols);  // static_assert(false) support is C++23
    static_assert(hash_cant_be_created, "hash can't be created with given policies!");
  }
};

/**
 * Minimal perfect hashing function
 *
 * @tparam unknown returned if there is no match
 * @tparam symbols constexpr pair of id values such as std::array{{std::pair{"FOO"}, 1}, std::pair{"BAR"}, 2}}
 * @tparam policies invocable which returns the hash
 * @param data continuous input data such as std::string_view, std::span, std::array
 * @param args... args propagated to policies
 * @return result of executing policies
 */
template<const auto unknown, const auto symbols, const auto policies = mph::policies>
    requires (std::size(symbols()) > 0u) and std::same_as<decltype(utility::value(symbols()[0])), decltype(unknown)>
constexpr auto hash = [] /*[[nodiscard]]*/ (auto&& data, auto &&...args) noexcept(true) { // attributes on lambdas is C++23
  constexpr auto min_max = utility::min_max_length<symbols>;
  return utility::overloaded{
    [&]<class T, class... Ts> (const std::basic_string_view<T, Ts...> sv) {
      if (const auto size = std::size(sv); size < min_max.first or size > min_max.second) {
        return unknown;
      }
      assert(std::size(sv) > 0u);
      return policies.template operator()<unknown, symbols>(sv, std::forward<decltype(args)>(args)...);
    },
    [&]<class T, const std::size_t Size> (const std::span<T, Size> span) {
      if constexpr (Size != std::dynamic_extent and (Size < min_max.first or Size > min_max.second)) {
        return unknown;
      } else {
        if (const auto size = std::size(span); size < min_max.first or size > min_max.second) {
          return unknown;
        }
        assert(std::size(span) > 0u);
        return policies.template operator()<unknown, symbols>(span, std::forward<decltype(args)>(args)...);
      }
    },
    [&]<class T, const std::size_t Size> (const std::array<T, Size>& array) {
      if constexpr (Size < min_max.first or Size > min_max.second) {
        return unknown;
      } else {
        return policies.template operator()<unknown, symbols>(array, std::forward<decltype(args)>(args)...);
      }
    },
  }(std::forward<decltype(data)>(data));
};
}  // namespace mph::inline v_1_0_0
#endif  // MPH
#endif  //  __cplusplus
