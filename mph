//
// Copyright (c) 2024 Kris Jusiak (kris at jusiak dot net)
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
#ifndef MPH
#define MPH 2'2'1 // SemVer

/**
 * Perfect hash library (https://github.com/boost-ext/mph)
 */
namespace mph::inline v2_2_1 {
using u8 = __UINT8_TYPE__;
using u16 = __UINT16_TYPE__;
using u32 = __UINT32_TYPE__;
using u64 = __UINT64_TYPE__;

#if defined (__AVX2__)
using u32x8 = u32 __attribute__((vector_size(8u * __CHAR_BIT__)));
using u64x4 = u64 __attribute__((vector_size(4u * __CHAR_BIT__)));
using fx8 = float __attribute__((vector_size(8u * __CHAR_BIT__)));
using dx4 = double __attribute__((vector_size(4u * __CHAR_BIT__)));
#endif

namespace utility {
template<class T1, class T2>
struct compressed_pair {
  using first_type = T1;
  using second_type = T2;
  [[no_unique_address]] T1 first;
  [[no_unique_address]] T2 second;
};
template<class T1, class T2> compressed_pair(T1, T2) -> compressed_pair<T1, T2>;

template<class T, u32 Size>
struct array {
  using value_type = T;
  [[nodiscard]] constexpr const T* data() const noexcept { return data_; }
  [[nodiscard]] constexpr T* data() noexcept { return data_; }
  [[nodiscard]] constexpr auto begin() const noexcept { return &data_[0]; }
  [[nodiscard]] constexpr auto begin() noexcept { return &data_[0]; }
  [[nodiscard]] constexpr auto end() const noexcept { return &data_[0] + Size; }
  [[nodiscard]] constexpr auto end() noexcept { return &data_[0] + Size; }
  [[nodiscard]] constexpr auto size() const noexcept { return Size; }
  [[nodiscard]] constexpr const auto& operator[](u32 i) const noexcept { return data_[i]; }
  [[nodiscard]] constexpr auto& operator[](u32 i) noexcept { return data_[i]; }
  constexpr void fill(const T& value) noexcept { for (auto i = 0u; i < Size; ++i) { data_[i] = value; } }
  T data_[Size];
};
template<class T, class... Ts> array(T, Ts...) -> array<T, 1u + sizeof...(Ts)>;

template<class...> inline constexpr auto is_same_v = false;
template<class T>  inline constexpr auto is_same_v<T, T> = true;

namespace detail {
template <bool> struct conditional;
template <> struct conditional<false> { template <class, class T> using fn = T; };
template <> struct conditional<true>  { template <class T, class> using fn = T; };
}  // namespace detail
template <bool B, class T, class F>
using conditional_t = typename detail::conditional<B>::template fn<T, F>;

template<class T, u32 alignment>
struct aligned {
  using type = struct alignas(alignment) a  : T { };
  static_assert(alignment == alignof(type));
};
template<class T> struct aligned<T, 0u> { using type = T; };
template<class T, u32 alignment>
using aligned_t = typename aligned<T, alignment>::type;

[[nodiscard]] constexpr auto clz(const u32 x) noexcept { return __builtin_clz(x); }
[[nodiscard]] constexpr auto clz(const u64 x) noexcept { return __builtin_clzl(x); }
[[nodiscard]] constexpr auto popcount(const u32 x) noexcept { return __builtin_popcountl(x); }
[[nodiscard]] constexpr auto popcount(const u64 x) noexcept { return __builtin_popcountll(x); }

#if defined(__BMI2__)
[[nodiscard]] [[gnu::always_inline]] inline auto bzhi(const u32 src, const u32 index) noexcept {
  return __builtin_ia32_bzhi_si(src, index);
}
[[nodiscard]] [[gnu::always_inline]] inline auto bzhi(const u64 src, const u64 index) noexcept {
  return __builtin_ia32_bzhi_di(src, index);
}
#else
template<class T>
[[nodiscard]] [[gnu::always_inline]] inline auto bzhi(const T src, const T index) noexcept -> T {
  return src & ((T(1) << index) - T(1));
}
#endif

/// https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#text=pext
template<auto mask, class T, T size = sizeof(T) * __CHAR_BIT__>
[[nodiscard]] constexpr /*consteval*/ auto PEXT(const T a) noexcept -> T {
  if constexpr (mask) {
    T result{};
    T m = mask;
    auto k = 0u;
    for (T i{}; i < size; ++i) {
      if (m & 1) result |= ((a >> i) & 1) << k++;
      m >>= 1;
    }
    return result;
  } else {
    return {};
  }
}

#if defined(__BMI2__)
template<auto mask>
[[nodiscard]] [[gnu::always_inline]] inline auto pext(const u64 a) noexcept -> u64 {
  if constexpr (mask) {
    return __builtin_ia32_pext_di(a, mask);
  } else {
    return {};
  }
}
template<auto mask>
[[nodiscard]] [[gnu::always_inline]] inline auto pext(const u32 a) noexcept -> u32 {
  if constexpr (mask) {
    return __builtin_ia32_pext_si(a, mask);
  } else {
    return {};
  }
}
#else
/// https://github.com/intel/compile-time-init-build/blob/main/include/lookup/pseudo_pext_lookup.hpp
template <auto mask, class T, T size = sizeof(T) * __CHAR_BIT__>
[[nodiscard]] [[gnu::always_inline]] inline auto pext(const T a) noexcept -> T {
  if constexpr(mask) {
    constexpr auto nbits = popcount(mask);
    constexpr auto cbits = (sizeof(T) * __CHAR_BIT__) - nbits - clz(mask);
    constexpr auto coefficient = [] {
      auto set = false;
      auto dst = cbits;
      T result{};
      for (auto i = 0u; i < size; ++i) {
        const auto curr = ((T(1) << i) & mask) != T();
        if (curr and not set) result = result | (T(1) << (dst - i));
        dst += curr;
        set = curr;
      }
      return result;
    }();
    return ((a & mask) * coefficient >> cbits) & ((T(1) << nbits) - T(1));
  } else {
    return {};
  }
}
#endif

template<class T, u32 N, template<class, auto> class C, class _, auto Size>
[[nodiscard]] constexpr auto mask(const C<_, Size>& v) noexcept -> T {
  utility::array<T, Size> vs;
  T max{};
  for (auto i = 0u; i < Size; ++i) {
    if (vs[i] = v[i].first; vs[i] > max) {
      max = vs[i];
    }
  }
  constexpr auto H = Size << 1u;
  utility::array<utility::compressed_pair<bool, T>, H> hashed;
  const auto nbits = (sizeof(T) * __CHAR_BIT__) - clz(max) - 1u;
  T mask{(T(1) << nbits) - 1u};

  for (int i = nbits; i >= 0; --i) {
    mask &= ~(T(1) << i);
    hashed = {};
    for (auto j = 0u; j < Size; ++j) {
      const auto masked = vs[j] & mask;
      auto slot = masked % H;
      auto n = N - 1u;
      while (hashed[slot].first) {
        if (hashed[slot].second == masked and not n--) break;
        slot = (slot + 1u) % H;
      }
      if (hashed[slot].first and hashed[slot].second == masked) {
        mask |= (T(1) << i);
        break;
      }
      hashed[slot] = {true, masked};
    }
  }
  return mask;
}
} // namespace utility

template<class T, class C, u32 Size>
  requires (sizeof(C) == sizeof(u8))
[[nodiscard]] constexpr /*consteval*/ auto to(const C (&data)[Size]) noexcept {
  T result{};
  constexpr auto size = Size - 1u; // no null terminated
  for (auto i = 0u; i < size; ++i) {
    result = (result << __CHAR_BIT__) | data[size - i - 1u];
  }
  return result;
}

template<class T>
[[nodiscard]] constexpr auto to(const T& value) noexcept -> const T& {
  return value;
}

template<class T, template<class, auto> class R, class _, auto Size>
[[nodiscard]] [[gnu::always_inline]] constexpr auto to(const R<_, Size>& data) noexcept -> T
  requires requires { data.data(); } {
  if constexpr (not Size) {
    return T{};
  } else if constexpr (Size == sizeof(T)) {
    return *__builtin_bit_cast(const T*, data.data());
  } else if constexpr (Size <= sizeof(T)) {
    T t{};
    __builtin_memcpy(&t, data.data(), Size);
    return t;
  }
}

template<class T, class cold>
[[nodiscard]] [[gnu::cold]] constexpr auto to(const auto& data) noexcept -> T
  requires requires { data.data(); data.size(); } {
  T t{};
  __builtin_memcpy(&t, data.data(), data.size());
  return t;
}

template<class T>
[[nodiscard]] [[gnu::always_inline]] constexpr auto to(const auto& data) noexcept -> T
  requires requires { data.data(); data.size(); } {
  #if not defined(MPH_PAGE_SIZE)
  #define MPH_PAGE_SIZE 4096u // Used for string-like keys if
                              // the input string size is not
                              // known at compile-time
                              // If set to 0u __builtin_memcpy is used instead
  #endif

  if constexpr (MPH_PAGE_SIZE) {
    // https://github.com/bminor/glibc/blob/master/sysdeps/generic/memcopy.h#L162
    if ((u64(data.data()) & (MPH_PAGE_SIZE - 1ul)) >= (MPH_PAGE_SIZE - sizeof(T))) [[unlikely]] { // page boundry
      return to<T, class cold>(data);
    }
    T t{};
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Warray-bounds"
    __builtin_memcpy(&t, data.data(), sizeof(T)); // not at page boundry
    #pragma GCC diagnostic pop

    if constexpr (sizeof(T) == sizeof(u32)) {
      return T(utility::bzhi(t, T(data.size() * __CHAR_BIT__)));
    } else if constexpr (sizeof(T) == sizeof(u64)) {
      return T(utility::bzhi(t, T(data.size() * __CHAR_BIT__)));
    }
    return t;
  } else {
    T t{};
    __builtin_memcpy(&t, data.data(), data.size());
    return t;
  }
}

struct config {
  constexpr config() = default;
  constexpr config(const auto& kv)
    : probablity{.5}
    , N{kv.size() < (1 << 8u) ? 1u : 4u}
    , alignment{}
  { }

  float probablity{.5}; // .0 - none of the input data can be found in the kv
                        // (.0, .5) - input data is unlikely to be found in the kv
                        // .5 - unpredictable (default)
                        // (.5, 1.) - input data is likely to be found in the kv
                        // 1. - all input data can be found in the kv
  u32 N{1u};            // 1 - no collisions, N - n collisions allowed
  u32 alignment{};      // 0 - no alignment, N - lookup alignment
};

/**
 * Perfect hash function
 *
 * @tparam kv constexpr array of key/value pairs
 * @tparam config configuration
 * @param key input data
 */
template<auto kv, config cfg = config{kv}>
  requires (cfg.N >= 1u and cfg.probablity >= .0f) and
  requires { kv.size(); kv.begin(); kv.end(); kv[0].first; kv[0].second; }
[[nodiscard]] constexpr auto hash(const auto& key) noexcept -> typename decltype(kv)::value_type::second_type {
  using key_type = typename decltype(kv)::value_type::first_type;
  using value_type = typename decltype(kv)::value_type::second_type;

  if (__builtin_is_constant_evaluated()) {
    constexpr auto to = [](const auto& data) -> decltype(auto) {
      if constexpr (requires { data.size(); }) {
        key_type result{};
        for (auto i = 0u; i < data.size(); ++i) {
          result = (result << __CHAR_BIT__) | data[data.size() - i - 1u];
        }
        return result;
      } else {
        return data;
      }
    };
    for (const auto& [k, v] : kv) {
      if (k == to(key)) {
        return v;
      }
    }
    return {};
  } else if constexpr (kv.size() == 0u or not cfg.probablity) {
    return {};
  } else if constexpr (kv.size() == 1u) {
    return to<key_type>(key) == kv[0].first ? kv[0].second : value_type{};
  #if defined (__AVX2__)
  } else if constexpr (kv.size() * sizeof(key_type) <= 32u) {
    return [&] {
      static constexpr const auto lookup = [] {
        utility::aligned_t<
            utility::compressed_pair<
              utility::aligned_t<
                utility::array<key_type, kv.size()>,
                cfg.alignment
              >,
              utility::aligned_t<
                utility::array<value_type, 1u + (1u << (kv.size() - 1u))>,
                cfg.alignment
              >
            >, cfg.alignment
        > lookup{};
        for (auto n = 0u; const auto& [key, value] : kv) {
          lookup.first[n] = key;
          lookup.second[1u << n] = value;
          ++n;
        }
        return lookup;
      }();
      return lookup.second[
        __builtin_ia32_movmskpd256(
          dx4(to<key_type>(key) == *(u64x4*)(lookup.first.data()))
        )
      ];
    }();
  #endif
  } else {
    return [&] {
      using mask_type = utility::conditional_t<sizeof(key_type) <= sizeof(u32), u32, u64>;
      static constexpr mask_type mask = utility::mask<key_type, cfg.N>(kv);
      static constexpr const auto lookup = [] {
        utility::aligned_t<
          utility::array<
            utility::compressed_pair<
              utility::aligned_t<
                utility::array<key_type, cfg.N>,
                cfg.alignment
              >,
              utility::aligned_t<
                utility::array<value_type, cfg.N == 1u ? 1u : 1u + (1u << (cfg.N - 1u))>,
                cfg.alignment
              >
            >, mask_type(1) << utility::popcount(mask)
          >, cfg.alignment
        > lookup{};
        for (const auto& [key, value] : kv) {
          if constexpr (auto& slot = lookup[utility::PEXT<mask>(key)]; cfg.N == 1u) {
            slot.first[0u] = key;
            slot.second[0u] = value;
          } else {
            auto n = 0u;
            while (slot.first[n]) n++;
            slot.first[n] = key;
            slot.second[1u << n] = value;
          }
        }
        return lookup;
      }();

      auto&& lhs = to<key_type>(key);
      auto&& rhs = lookup[utility::pext<mask>(lhs)];

      if constexpr (cfg.N == 1u) {
        #if defined(__clang__)
          if constexpr (cfg.probablity == .5f) {
            if (__builtin_unpredictable(lhs == rhs.first[0])) {
              return rhs.second[0];
            }
          } else
        #endif
        if (__builtin_expect_with_probability(lhs == rhs.first[0], 1, cfg.probablity)) {
          return rhs.second[0];
        }
      }
      #if defined (__AVX2__)
      else if constexpr (cfg.N <= sizeof(mask_type)) {
        return rhs.second[__builtin_ia32_movmskpd256(
          dx4(to<key_type>(key) == *(u64x4*)(rhs.first.data()))
        )];
      }
      #endif

      return value_type{};
    }();
  }
};
} // namespace mph

#if not defined(DISABLE_STATIC_ASSERT_TESTS)
static_assert(([] {
  constexpr auto expect = [](bool cond) { if (not cond) { void failed(); failed(); } };

  // mph::utility::compressed_pair
  {
    static_assert(1 == mph::utility::compressed_pair{1, 2}.first);
    static_assert(2 == mph::utility::compressed_pair{1, 2}.second);
    static_assert(sizeof(int) + sizeof(int) == sizeof(mph::utility::compressed_pair{int{}, int{}}));
    struct empty { };
    static_assert(sizeof(int) == sizeof(mph::utility::compressed_pair{empty{}, 42}));
    static_assert(sizeof(int) == sizeof(mph::utility::compressed_pair{42, empty{}}));
    static_assert(sizeof(empty) + sizeof(empty) == sizeof(mph::utility::compressed_pair{empty{}, empty{}}));
  }

  // mph::utility::array
  {
    {
      mph::utility::array<mph::u32, 1> a{};
      expect(1 == a.size());
    }

    {
      mph::utility::array a{1, 2};
      expect(2u == a.size());
      expect(1 == a[0]);
      expect(2 == a[1]);
    }

    {
      mph::utility::array a{1};
      a[0] = 2;
      expect(2 == a[0]);
    }

    {
      mph::utility::array a{1, 2, 3};
      expect(3u == a.size());
      expect(a.begin() != a.end());
      expect(a.size() == mph::u32(a.end() - a.begin()));
      expect(a.end() == a.begin() + a.size());
    }
  }

  // mp::utility::is_same_v
  {
    static_assert(mph::utility::is_same_v<void, void>);
    static_assert(mph::utility::is_same_v<int, int>);
    static_assert(not mph::utility::is_same_v<int, void>);
    static_assert(not mph::utility::is_same_v<void, int>);
    static_assert(not mph::utility::is_same_v<void*, int>);
    static_assert(not mph::utility::is_same_v<int, const int>);
  }

  // mph::utility::conditional_t
  {
    static_assert(mph::utility::is_same_v<void, mph::utility::conditional_t<true, void, int>>);
    static_assert(mph::utility::is_same_v<int, mph::utility::conditional_t<false, void, int>>);
  }

  // mph::utility::aligned_t
  {
    using mph::utility::array;

    static_assert(16u == alignof(mph::utility::aligned_t<array<int, 42>, 16u>));
    static_assert(32u == alignof(mph::utility::aligned_t<array<int, 42>, 32u>));
    static_assert(64u == alignof(mph::utility::aligned_t<array<int, 42>, 64u>));
    static_assert(alignof(int) == alignof(mph::utility::aligned_t<array<int, 42>, 0u>));
  }

  // mph::utility::pext
  {
    static_assert(0    == mph::utility::PEXT<0b00>(0b00));
    static_assert(0    == mph::utility::PEXT<0b00>(0b01));
    static_assert(0b1  == mph::utility::PEXT<0b01>(0b01));
    static_assert(0b01 == mph::utility::PEXT<0b11>(0b01));
    static_assert(0b0  == mph::utility::PEXT<0b10>(0b01));
    static_assert(0b1  == mph::utility::PEXT<0b10>(0b11));
    static_assert(0b1  == mph::utility::PEXT<0b01>(0b11));
    static_assert(0b11 == mph::utility::PEXT<0b11>(0b11));
  }

  // mph::utility::mask
  {
    using mph::u32;
    using mph::utility::array;
    using mph::utility::compressed_pair;

    static_assert(0b10 == mph::utility::mask<u32, 1u>(array{compressed_pair{0b10, 0}, compressed_pair{0b00, 0}}));
    static_assert(0b01 == mph::utility::mask<u32, 1u>(array{compressed_pair{0b00, 0}, compressed_pair{0b01, 0}}));
    static_assert(0b01 == mph::utility::mask<u32, 1u>(array{compressed_pair{0b10, 0}, compressed_pair{0b01, 0}}));
    static_assert(0b01 == mph::utility::mask<u32, 1u>(array{compressed_pair{0b11, 0}, compressed_pair{0b00, 0}}));
    static_assert(0b01 == mph::utility::mask<u32, 1u>(array{compressed_pair{0b00, 0}, compressed_pair{0b11, 0}}));
  }

  // mph::to
  {
    static_assert(0 == mph::to<int>(""));
    static_assert((int('A') << 0) + (int('B') << __CHAR_BIT__) == mph::to<int>("AB"));
    static_assert((int('A') << 0) + (int('B') << __CHAR_BIT__) + (int('C') << __CHAR_BIT__*2) == mph::to<int>("ABC"));
  }

  // mph::hash
  {
    using mph::u32;
    using mph::utility::compressed_pair;
    using mph::utility::array;

    // integral
    {
      {
        constexpr array kv{
          compressed_pair{u32(4), u32(2)},
        };

        static_assert(0 == mph::hash<kv>(u32(0)));
        static_assert(0 == mph::hash<kv>(u32(1)));
        static_assert(2 == mph::hash<kv>(u32(4)));
      }

      {
        constexpr array kv{
          compressed_pair{u32(4), u32(2)},
          compressed_pair{u32(42), u32(87)},
          compressed_pair{u32(100), u32(100)},
        };

        static_assert(0 == mph::hash<kv>(u32(0)));
        static_assert(2 == mph::hash<kv>(u32(4)));
        static_assert(87 == mph::hash<kv>(u32(42)));
        static_assert(100 == mph::hash<kv>(u32(100)));
      }
    }

    // string-like
    {
      {
        constexpr array kv{
          compressed_pair{mph::to<u32>("BTC"), 1},
          compressed_pair{mph::to<u32>("ETH"), 2},
          compressed_pair{mph::to<u32>("XRP"), 3},
        };

        static_assert(0 == mph::hash<kv>(mph::to<u32>("")));
        static_assert(1 == mph::hash<kv>(mph::to<u32>("BTC")));
        static_assert(2 == mph::hash<kv>(mph::to<u32>("ETH")));
        static_assert(3 == mph::hash<kv>(mph::to<u32>("XRP")));
      }
    }
  }
}(), true));
#endif
#endif // MPH
