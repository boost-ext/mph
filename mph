//
// Copyright (c) 2024 Kris Jusiak (kris at jusiak dot net)
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
#if __cplusplus < 202002L
#error "MPH requires C++20!"
#else
#ifndef MPH
#define MPH 1'0'0

#include <algorithm>
#include <array>
#include <bit>
#include <cassert>
#include <cstdint>
#include <new>
#include <numeric>
#include <cstring>
#include <ranges>
#include <string_view>
#include <type_traits>
#include <vector>

#if __has_include(<x86intrin.h>)
#include <x86intrin.h>
#endif

namespace mph::inline v_1_0_0 {
namespace utility {
#if defined(__cpp_lib_hardware_interference_size)
static constexpr auto cache_line_size = ::std::hardware_constructive_interference_size;
#else
static constexpr auto cache_line_size = 64; // x86-64
#endif

template <std::size_t N>
  requires(N > 0)
struct bitset final {
  constexpr explicit(true) bitset(const auto value) {
    for (std::size_t i{}; i < N; ++i) {
      bits[i] = value & (1ull << i);
    }
  }
  constexpr auto set(const auto i, const auto value) { bits[i] = value; }
  [[nodiscard]] constexpr auto size() const { return std::size(bits); }
  [[nodiscard]] constexpr auto operator[](const auto i) const { return bits[i]; }
  template <class T>
  [[nodiscard]] constexpr auto to() const -> T
    requires(sizeof(T) * 8 >= N)
  {
    T result{};
    for (auto i = 0u; i < N; ++i) {
      result |= static_cast<T>(bits[i]) << i;
    }
    return result;
  }
  std::array<bool, N> bits{};
};

// clang-format off
static_assert(1 == bitset<1>{1}[0]);
static_assert(0 == bitset<1>{0}[0]);
static_assert(1 == bitset<2>{0b01}[0]);
static_assert(0 == bitset<2>{0b01}[1]);
static_assert(0b01 == bitset<2>{0b01}.to<int>());
static_assert(0b10 == bitset<2>{0b10}.to<int>());
// clang-format on

template <class T>
[[nodiscard]] constexpr auto as(const auto value) -> T {
  T result{};
  for (auto i = 0u; i < std::min(std::size(value), sizeof(T)); ++i) {
    result = (result << 8) | value[std::min(std::size(value), sizeof(T)) - 1 - i];  // little-endian
  }
  return result;
}

// clang-format off
static_assert(std::is_same_v<std::uint16_t, decltype(as<std::uint16_t>(std::array<std::uint8_t, 2>{0, 1}))>);
static_assert(std::uint32_t(0b00000001'00000000) == as<std::uint16_t>(std::array<std::uint8_t, 2>{0, 1}));
static_assert(std::is_same_v<std::uint16_t, decltype(as<std::uint16_t>( std::array<std::uint8_t, 2>{1, 0}))>);
static_assert(std::uint32_t(0b00000000'00000001) == as<std::uint16_t>(std::array<std::uint8_t, 2>{1, 0}));
static_assert(std::is_same_v<std::uint8_t, decltype(as<std::uint8_t>(std::string_view{"a"}))>);
static_assert(std::uint8_t('a') == as<std::uint8_t>(std::string_view{"a"}));
static_assert(std::is_same_v<std::uint32_t, decltype(as<std::uint32_t>(std::array<std::uint8_t, 4>{ 'a', 'b', 0, 0}))>);
static_assert(((std::uint32_t('b') << 8) | std::uint32_t('a') << 0) == as<std::uint32_t>(std::array<std::uint8_t, 4>{'a', 'b', 0, 0}));
static_assert(std::is_same_v<std::uint32_t, decltype(as<std::uint32_t>(std::array<std::uint8_t, 4>{0, 0, 'a', 'b'}))>);
static_assert(((std::uint32_t('b') << 24) | std::uint32_t('a') << 16) == as<std::uint32_t>(std::array<std::uint8_t, 4>{0, 0, 'a', 'b'}));
// clang-format on

/**
 * https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#text=pext
 *
 * DO WHILE m < 64
 * 	IF mask[m] == 1
 * 		dst[k] := tmp[m]
 * 		k := k + 1
 * 	FI
 * 	m := m + 1
 * OD
 */
template <class T>
[[nodiscard]] constexpr auto pext(const T a, T mask) {
  T result{};
  auto k = 0u;
  auto m = 0u;
  while (m < sizeof(T) * 8) {
    if ((mask & 1) == 1) {
      result |= ((a >> m) & 1) << k++;
    }
    mask >>= 1;
    ++m;
  }
  return result;
}

// clang-format off
static_assert(0b00 == pext(0b00, 0b00));
static_assert(0b00 == pext(0b01, 0b00));
static_assert(0b01 == pext(0b01, 0b01));
static_assert(0b01 == pext(0b01, 0b11));
static_assert(0b00 == pext(0b01, 0b10));
static_assert(0b01 == pext(0b11, 0b10));
static_assert(0b01 == pext(0b11, 0b01));
static_assert(0b11 == pext(0b11, 0b11));
// clang-format on

/**
 * Finds T type mask which uniquly identifies given symbols
 */
template <class T>
[[nodiscard]] constexpr auto mask(const std::ranges::range auto &symbols) {
  constexpr auto is_unique = [](const auto &symbols, const auto mask) {
    std::vector<T> v{};
    for (const auto &symbol : symbols) {
      const auto value = pext(as<T>(symbol), mask.template to<T>());
      if (std::find(std::cbegin(v), std::cend(v), value) != std::cend(v)) {
        return false;
      }
      v.push_back(value);
    }
    return true;
  };

  bitset<sizeof(T) * 8> mask(std::numeric_limits<T>::max());
  for (auto i = 0u; i < std::size(mask); ++i) {
    mask.set(i, 0);
    if (not is_unique(symbols, mask)) {
      mask.set(i, 1);
    }
  }
  if (not is_unique(symbols, mask)) {
    throw;  // not a constant
  }
  return mask.template to<T>();
}

// clang-format off
static_assert(0b00000000'00000001 == mask<std::uint16_t>(std::array{ std::array<std::uint8_t, 2>{1, 0}, std::array<std::uint8_t, 2>{0, 0}}));
static_assert(0b00000001'00000000 == mask<std::uint16_t>(std::array{ std::array<std::uint8_t, 2>{0, 0}, std::array<std::uint8_t, 2>{0, 1}}));
static_assert(0b00000001'00000000 == mask<std::uint16_t>(std::array{ std::array<std::uint8_t, 2>{1, 0}, std::array<std::uint8_t, 2>{0, 1}}));
static_assert(0b00000001'00000000 == mask<std::uint16_t>(std::array{ std::array<std::uint8_t, 2>{0, 1}, std::array<std::uint8_t, 2>{1, 0}}));
static_assert(0b00000001'00000000 == mask<std::uint16_t>(std::array{ std::array<std::uint8_t, 2>{1, 1}, std::array<std::uint8_t, 2>{1, 0}}));
static_assert(0b00000000'00000001 == mask<std::uint16_t>(std::array{ std::array<std::uint8_t, 2>{1, 1}, std::array<std::uint8_t, 2>{0, 1}}));
static_assert(0b00000000'00000001'00000001 == mask<std::uint16_t>(std::array{ std::array<std::uint8_t, 3>{1, 1, 1}, std::array<std::uint8_t, 3>{0, 0, 0}, std::array<std::uint8_t, 3>{1, 0, 1}}));
static_assert(0b00000000'00000001'00000001 == mask<std::uint16_t>(std::array{ std::array<std::uint8_t, 3>{0, 0, 1}, std::array<std::uint8_t, 3>{1, 0, 1}, std::array<std::uint8_t, 3>{1, 1, 0}}));
static_assert(0b00000000'00000001'00000001 == mask<std::uint16_t>(std::array{ std::array<std::uint8_t, 3>{0, 0, 0}, std::array<std::uint8_t, 3>{1, 1, 1}, std::array<std::uint8_t, 3>{0, 1, 0}}));
// clang-format on
}  // namespace utility

namespace concepts {
template <const std::uint64_t mask, const std::size_t max_bits_size>
concept required_bits_size = std::popcount(mask) <= max_bits_size;

// clang-format off
static_assert(required_bits_size<0b00, 0u>);
static_assert(required_bits_size<0b00, 1u>);
static_assert(required_bits_size<0b00, 2u>);
static_assert(required_bits_size<0b10, 2u>);
static_assert(required_bits_size<0b01, 2u>);
static_assert(not required_bits_size<0b01, 0>);
static_assert(not required_bits_size<0b10, 0>);
static_assert(not required_bits_size<0b11, 1>);
// clang-format on

template <const auto masks, const std::size_t max_bits_size>
concept required_symbols_bits_size = std::all_of(std::cbegin(masks), std::cend(masks), [](const auto mask) {
  return std::size_t(std::popcount(mask)) <= max_bits_size;
});

// clang-format off
static_assert(required_symbols_bits_size<std::array{0b00u, 0b00u}, 0u>);
static_assert(required_symbols_bits_size<std::array{0b01u, 0b01u}, 1u>);
static_assert(required_symbols_bits_size<std::array{0b10u, 0b01u}, 1u>);
static_assert(not required_symbols_bits_size<std::array{0b01u, 0b01u}, 0u>);
static_assert(not required_symbols_bits_size<std::array{0b11u, 0b10u}, 1u>);
static_assert(not required_symbols_bits_size<std::array{0b10u, 0b11u}, 1u>);
static_assert(not required_symbols_bits_size<std::array{0b11u, 0b11u}, 1u>);
// clang-format on

template <class TSymbols, std::size_t Size>
concept supported_symbols_size = [](const auto &symbols) {
  return std::all_of(std::cbegin(symbols), std::cend(symbols), [](const auto &symbol) { return std::size(symbol) <= Size; });
}(TSymbols{}());

// clang-format off
static_assert(supported_symbols_size<decltype([] { return std::array{std::array<char, 1>{}, std::array<char, 1>{}}; }), 1u>);
static_assert(supported_symbols_size<decltype([] { return std::array{std::array<char, 1>{}, std::array<char, 1>{}}; }), 2u>);
static_assert(supported_symbols_size<decltype([] { return std::array{std::array<char, 2>{}, std::array<char, 2>{}}; }), 2u>);
static_assert(supported_symbols_size<decltype([] { return std::array{std::array<char, 2>{}, std::array<char, 2>{}}; }), 3u>);
static_assert(not supported_symbols_size<decltype([] { return std::array{std::array<char, 2>{}, std::array<char, 2>{}}; }), 0u>);
static_assert(not supported_symbols_size<decltype([] { return std::array{std::array<char, 2>{}, std::array<char, 2>{}}; }), 1u>);
// clang-format on
}  // namespace concepts

/*
 * @return 0 if string doesn't match, 1..N for matches
 *  - requires symbols to have the same size <= 8 bytes
 *  - requires platform with bmi2 support (https://en.wikipedia.org/wiki/X86_Bit_manipulation_instruction_set)
 */
template <const std::size_t max_bits_size = 5, const std::size_t cache_line_size = utility::cache_line_size, class T = std::uint64_t>
class pext_direct {
  template <const auto mask>
  [[nodiscard]] static constexpr auto make_lut(const auto &symbols) {
    alignas(cache_line_size) std::array<std::array<char, 8>, 32> lut{};
    for (const auto &symbol : symbols()) {
      auto &p = lut[utility::pext(utility::as<T>(symbol), mask)];
      // mempcpy
      for (auto k = 0u; k < std::size(symbol); ++k) {
        p[k] = symbol[k];
      }
    }
    return lut;
  }

  template <const auto mask>
  [[nodiscard]] static constexpr auto make_index(const auto &symbols) {
    constexpr auto size = [] {  // std::pow is not constexpr
      std::size_t result{1};
      for (auto i = 0u; i < std::popcount(mask); ++i) {
        result *= 2;
      }
      return result;
    }();

    alignas(cache_line_size) std::array<std::uint64_t, size> index{};
    for (auto i = 0u; const auto &symbol : symbols()) {
      index[utility::pext(utility::as<std::uint64_t>(symbol), mask)] = ++i;
    }
    return index;
  }

 public:
  template <class TSymbols, const auto mask = utility::mask<T>(TSymbols{}())>
    requires concepts::required_bits_size<mask, max_bits_size> and
             concepts::supported_symbols_size<TSymbols, sizeof(T)>
  [[nodiscard]] [[gnu::target("bmi2")]] auto operator()(const TSymbols s, const auto* data, const auto size, [[maybe_unused]] auto &&...args) const noexcept(true) -> std::size_t {
    // using v8si = std::int8_t __attribute__((vector_size(sizeof(std::uint64_t))));
    // using m128 = union {
    // std::uint64_t xmm;
    // v8si v8;
    //};
    static constexpr const auto index = make_index<mask>(s);
    // static constexpr const auto lut = make_lut<mask>(s);
    const auto lhs = [&] {
      if constexpr (requires { size.unknown; }) {
        return *std::bit_cast<const T *>(data);
      } else {
        T t{};
        std::memcpy(&t, data, size);
        return t;
      }
    }();
    const auto ext = _pext_u64(lhs, mask);
    return index[ext];

    // const auto rhs = std::bit_cast<const v8si*>(std::data(lut[ext]));
    ////const auto idx = std::bit_cast<const v8si*>(std::addressof(index[ext]));
    // static constexpr auto max = (1ull << std::size(symbols()[0])*8) - 1ull;
    // const auto cmp = *std::bit_cast<const v8si*>(data) == *rhs;
    // const auto x = (cmp == max);
    // return std::bit_cast<const m128*>(std::addressof(x))->xmm==max * idx;
  }
};

template <const std::size_t max_bits_size = 5, const std::size_t cache_line_size = utility::cache_line_size, class T = std::uint64_t>
class pext_split_on_first_char {
  static constexpr auto calc_offset = [](const auto &symbols) {
    return (
        *std::min_element(std::cbegin(symbols), std::cend(symbols), [](const auto &lhs, const auto &rhs) { return lhs[0] < rhs[0]; }))[0];
  };

  template <std::ranges::range auto masks, const auto offset>
  [[nodiscard]] static constexpr auto make_luts(const auto &symbols) {
    std::vector<std::string_view> v[32]{};  // TODO max
    for (const auto &symbol : symbols()) {
      v[symbol[0] - offset].push_back(symbol);
    }
    alignas(cache_line_size) std::array<std::array<std::array<char, 8>, 32>, 32> lut{};
    for (auto i = 0u; i < 32; ++i) {  // TODO max
      for (auto j = 0u; j < std::size(v[i]); ++j) {
        auto &p = lut[i][utility::pext(utility::as<std::uint64_t>(v[i][j]), masks[i])];
        for (auto k = 0u; k < 8; ++k) {  // TODO max
          p[k] = v[i][j][k];
        }
      }
    }
    return lut;
  }

  template <const auto offset>
  [[nodiscard]] static constexpr auto make_masks(const auto &symbols) {
    std::vector<std::string_view> v[32]{};  // TODO max
    for (const auto &symbol : symbols()) {
      v[symbol[0] - offset].push_back(symbol);
    }
    alignas(cache_line_size) std::array<T, 32> masks{};  // TODO max, pad to 64
    for (auto i = 0u; i < 32; ++i) {                     // TODO max
      masks[i] = utility::mask<T>(v[i]);
    }
    return masks;
  }

  template <const auto masks, const auto offset>
  [[nodiscard]] static constexpr auto make_indexes(const auto &symbols) {
    std::vector<std::size_t> idx[32]{};     // TODO max
    std::vector<std::string_view> v[32]{};  // TODO max
    auto i = 0;
    for (const auto &symbol : symbols()) {
      idx[symbol[0] - offset].push_back(++i);
      v[symbol[0] - offset].push_back(symbol);
    }
    alignas(cache_line_size) std::array<std::array<std::uint64_t, 32>, 32> index{};  // TODO max
    for (auto i = 0u; i < 32; ++i) {
      for (auto j = 0u; j < std::size(v[i]); ++j) {
        index[i][utility::pext(utility::as<std::uint64_t>(v[i][j]), masks[i])] = idx[i][j];
      }
    }
    return index;
  }

 public:
  template <class TSymbols, const auto offset = calc_offset(TSymbols{}()),
            const auto masks = make_masks<offset>(TSymbols{})>
    requires concepts::required_symbols_bits_size<masks, max_bits_size> and
             concepts::supported_symbols_size<TSymbols, sizeof(T)>
             [[nodiscard]] [[gnu::target("bmi2")]] auto operator()(const TSymbols s, const auto* data,
                                                                   [[maybe_unused]] const auto size,
                                                                   [[maybe_unused]] auto &&...args) const noexcept(true)
                 -> std::size_t {
    // using v8si = std::int8_t __attribute__((vector_size(sizeof(std::uint64_t))));
    // using m128 = union {
    // std::uint64_t xmm;
    // v8si v8;
    //};
    // static constexpr const auto lut = make_luts<masks, symbols, offset>();
    static constexpr const auto index = make_indexes<masks, offset>(s);
    const auto id = data[0] - offset;
    const auto lhs = *std::bit_cast<const std::uint64_t *>(data);
    const auto ext = _pext_u64(lhs, masks[id]);
    // const auto rhs = std::bit_cast<const v8si *>(std::data(lut[id][ext]));
    // const auto idx = std::bit_cast<const v8si *>(std::addressof(index[id][ext]));
    return index[id][ext];
  }
};

/**
 * Default implemention for picking the the policy based on the symbols, available policies and the input data
 */
constexpr auto default_policies = [](const auto symbols, const auto* data, const auto size, auto&&... args) {
  if constexpr (constexpr auto max_bits_size = 5; requires { pext_direct<max_bits_size>{}(symbols, data, size, std::forward<decltype(args)>(args)...); }) {
    return pext_direct<max_bits_size>{}(symbols, data, size, std::forward<decltype(args)>(args)...);
  } else if constexpr (requires { pext_split_on_first_char<max_bits_size>{}(symbols, data, size, std::forward<decltype(args)>(args)...); }) {
    return pext_split_on_first_char<max_bits_size>{}(symbols, data, size, std::forward<decltype(args)>(args)...);
  } else {
    constexpr auto always_false = [](auto &&) { return false; }(data); // static_assert(false) support is C++23
    static_assert(always_false, "hash can't be constructed with given policies!");
  }
};

/**
 * Minimal perfect hash function (https://en.wikipedia.org/wiki/Perfect_hash_function#Minimal_perfect_hash_function)
 *
 * @tparam TSymbols compile time array of symbols
 * @tparam TPolicies compile time policies to be executed in given order
 */
template <std::invocable TSymbols, class TPolicies = decltype(default_policies)>
class hash final {
  struct unknown_size final {
    static constexpr auto unknown = true; // tag for `if constexpr (requires { size.unknown; })`
  };

 public:
  constexpr explicit(true) hash(const TSymbols &symbols, const TPolicies &policies = {})
      : symbols{symbols}, policies{policies} {}

  /**
   * @param data continuous input data
   * @param args... additonal parameters propagated to policies
   * @return result from executed policy
   */
  template <class T, std::size_t Size>
    requires(sizeof(T) == 1u)
  [[nodiscard]] constexpr auto operator()(const T (&&data)[Size], auto &&...args) const noexcept(true) -> std::size_t {
    constexpr auto symbols = this->symbols();
    constexpr auto min_max =
        std::minmax_element(std::cbegin(symbols), std::cend(symbols),
                            [](const auto &lhs, const auto &rhs) { return std::size(lhs) < std::size(rhs); });
    if constexpr (Size < min_max.first or Size > min_max.second) {
      return {};
    } else {
      return policies(this->symbols, data, std::integral_constant<decltype(Size), Size>{}, std::forward<decltype(args)>(args)...);
    }
  }

  /**
   * @param data continuous input data
   * @param args... additonal parameters propagated to policies
   * @return result from executed policy
   */
  template <class T>
    requires(sizeof(T) == 1u)
  [[nodiscard]] constexpr auto operator()(const T *const data, auto &&...args) const noexcept(true) -> std::size_t {
    assert(data);
    return policies(this->symbols, data, unknown_size{}, std::forward<decltype(args)>(args)...);
  }

  /**
   * @param data continuous input data
   * @param args... additonal parameters propagated to policies
   * @return result from executed policy
   */
  template <class T, class... Ts>
    requires(sizeof(T) == 1u)
  [[nodiscard]] constexpr auto operator()(const std::basic_string_view<T, Ts...> data, auto &&...args) const noexcept(true)
      -> std::size_t {
    return policies(this->symbols, std::data(data), std::size(data), std::forward<decltype(args)>(args)...);
  }

  TSymbols symbols{};
  [[no_unique_address]] TPolicies policies{};
};
}  // namespace mph::inline v_1_0_0
#endif  // MPH
#endif  //  __cplusplus
